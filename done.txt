done for version 0.9.0:
-add XIOS REST API version and full XMS version (if available via XMS type -- available for XIOS v4+, but, leave blank for XIOS v3 and lower?) to XioConnection object
	-to be used by other things that need to determine API version available, objects available, when to use Tag version VolumeFolder API path, etc.
	-new properties on XioItemInfo.XioConnection objects:  RestApiVersion, XmsDBVersion, XmsSWVersion (string representation, like "4.0.1-41"), XmsVersion
-have config array of object types that are only available as of APIv2, to be used for when, say, doing Get-XIOTag against older XMS connection:  will gracefully return that the object type is not available in given XMS's API
-add support for new types in APIv2 (XIOS v4+): (see p17 of REST API ref)
	done:
	type names:  alert-definitions, alerts, bbus, consistency-groups, daes, dae-controllers, dae-psus, email-notifier, infiniband-switches, ldap-configs, local-disks, performance, schedulers, slots, snapshot-sets, snmp-notifier, storage-controller-psus, syslog-notifier, tags, user-accounts, xms
	Types:  Alert Definitions, Alerts, BBUs, Consistency Groups, DAEs, DAE Controllers, DAE PSUs, Email Notifiers, InfiniBand Switches, LDAP Configurations, Local Disks, Object Performance, Schedulers, Slots, Snapshot Sets, SNMP Notifiers, Storage Controller PSUs, SYSLOG Notifiers, Tags, User Accounts, XMS
	-added piece that will only try to get <v2 objects, as defined by a cfg item that is a hsh of v2 object> when XIOConnection RestAPI version is 2 or greater

	not doing yet:
	-consistency-group-volumes, as their properties returned seem to just be consistency groups, not consistency group volumes (properties match identically, and there are none of the Performance types of properties in the object as there are in the advertised object per the API guide)
		-and, from initial query of "https://xms.dom.com/api/json/types/consistency-group-volumes", the sub-property is "consistency-groups" (instead of the expected "consistency-group-volumes")
		-possible mix-up in the API?
	-SYR Notifiers -- no corresponding type found in API
	-getting performance counter for Tag EntityType needs more work (API call needs obj-list defined, apparently, and is throwing errors even when having done so)
-fixed bug where DataProtectionGroup object creation threw error, as object returned from API could possibly have non "true"/"false" values as of XIOS v4


done for version 0.8.3:
-updated New-XioApiURI to throw error on port-communications test failure (formerly, it did a "break" instead of throwing an error, which would cause a user's try/catch around cmdlets to just exit instead of actually get caught, as there was no error previously)
-added TestPort param to New-XioApiURI function, and updated Connect-XIOServer to use it; that way, Connect-XIOServer causes a port-comms test, but thereafter, cmdlets assume that the port is still good, and do not test; this is to work through some performance/timeout issues that were happening in certain scenarios (when a port test was happening at high frequency, and default 2s timeout was getting hit)
-updated DataReduction property calculation on Cluster objects:  at least the XIOS v4.0.0-54 beta and v4.0.1-7 versions no longer returned the property "data-reduction-ratio". So, added code to workaround this change so that the real DataReduction value is still accurate


done for version 0.8.2:
-fixed bug where some VolSizeTB and UsedLogicalTB values were defined as Int32 types in the type definition, which lead to lack of precision due to subsequent rounding in the casting process


done for version 0.8.1:
-updated Connect-XIOServer to return "legit" object type, instead of PSObject with inserted typename of XioItemInfo.XioConnection (so that things like "$oConnection -is [XioItemInfo.XioConnection]" return $true)
-fixed incorrect examples in changelog


done for version 0.8.0:
-added additional parameters to New-XIOVolume cmdlet (as exposed in xmcli "add-volume" cmd); can set small-io-alerts, unaligned-io-alerts, vaai-tp-alerts to "enabled" or "disabled"; implemented as switch params
	-Volume was the only one with additional options for now; Initiator, InitiatorGroup, InitiatorGroupFolder, VolumeFolder, LunMap had no more interesting (aside from Initiator's ISCSI items, which this module does not yet support)
-published fn Update-TitleBarForXioConnection (title bar sometimes gets whacked by PowerCLI things)
-fixed "compression" / "compressoin" typo in changelog
-defined output types made by module, used Add-Type to add them to session
	-required renaming properties that have a dash in their name to not have a dash (.NET properties should not have a dash)
		-properties renamed:
			"brick-id" -> BrickId
			"rg-id" -> RGrpId
			"ssd-slot-array" -> SsdSlotInfo
			"xms-id" -> XmsId
			"ig-id" -> InitiatorGrpId
			"initiator-id" -> InitiatorId
			"lu-name" -> LuName
			"small-io-ratio" -> SmallIORatio
			"small-io-ratio-level" -> SmallIORatioLevel
			"snapgrp-id" -> SnapGrpId
			"unaligned-io-ratio" -> UnalignedIORatio
			"unaligned-io-ratio-level" -> UnalignedIORatioLevel
			"sys-id" -> SysId
			"ssd-id" -> SsdId
			"ssd-rg-state" -> SsdRGrpState
			"ssd-uid" -> SsdUid
			"xenv-id" -> XEnvId
			"xenv-state" -> XEnvState
			"ig-index" -> InitiatorGrpIndex
			"tg-name" -> TargetGrpName
			"tg-index" -> TargetGrpIndex
			"tg-id" -> TargetGrpId
			"vol-index" -> VolumeIndex
			"os-version" -> OSVersion
			"IMPIState" -> IPMIState
		-types renamed (removed dashes):
			"Data-Protection-Group" -> DataProtectionGroup
			"Data-Protection-GroupPerformance" -> DataProtectionGroupPerformance
			"Ig-Folder" -> IgFolder
			"Ig-FolderPerformance" -> IgFolderPerformance
			"Initiator-Group" -> InitiatorGroup
			"Initiator-GroupPerformance" -> InitiatorGroupPerformance
			"Lun-Map" -> LunMap
			"Storage-Controller" -> StorageController
			"Target-Group" -> TargetGroup
			"Volume-Folder" -> VolumeFolder
			"Volume-FolderPerformance" -> VolumeFolderPerformance
	-included something that calls that definition/types file when the module is loaded
-changed property values to be more usable (partially in support of adding pipelining support)
	-on Initiator and InitiatorGroup objects:
		-InitiatorGrpId property now is a string that is just the ID, instead of the array of three strings which was @(<initiator group ID string>, <initiator group name>, <initiator group object index number>)
	-on Volume and Snapshot objects:
		-VolId property now is a string that is just the ID, instead of the array of three strings which was @(<volume ID string>, <volume name>, <volume object index number>)
-added property to IgFolder objects that is the list of IDs of the initiator groups that reside directly in the given IgFolder
-added OutputType to cmdlets once types were defined
	done:
		Connect-XIOServer, Get-XIOBrick, Get-XIOCluster, Get-XIOClusterPerformance, Get-XIODataProtectionGroup, Get-XIODataProtectionGroupPerformance, Get-XIOEvent, Get-XIOInitiator, Get-XIOInitiatorGroup, Get-XIOInitiatorGroupFolder, Get-XIOInitiatorGroupFolderPerformance, Get-XIOInitiatorGroupPerformance, Get-XIOInitiatorPerformance, Get-XIOLunMap, Get-XIOSnapshot, Get-XIOSsd, Get-XIOSsdPerformance, Get-XIOStorageController, Get-XIOStoredCred, Get-XIOTarget, Get-XIOTargetGroup, Get-XIOTargetPerformance, Get-XIOVolume, Get-XIOVolumeFolder, Get-XIOVolumeFolderPerformance, Get-XIOVolumePerformance, Get-XIOXenv, New-XIOInitiator, New-XIOInitiatorGroup, New-XIOInitiatorGroupFolder, New-XIOLunMap, New-XIOStoredCred, New-XIOVolume, New-XIOVolumeFolder
	none needed:
		Disconnect-XIOServer, Get-XIOItemInfo, Open-XIOMgmtConsole, Remove-XIOStoredCred, Update-TitleBarForXioConnection
	-some required changing code to take the "-" out of type names, and taking dashes out of TypeName in formats ps1xml
		Changed PSTypeName piece to include ".Replace('-','')", to remove dashes from TypeNames
-updated piece that makes the objects to return; returns "fully" legit objects now, by using proper typename for New-Object, instead of inserting PSTypeName into PSObject after the fact
-fixed ParameterSet bug where specifying URI to most Get-* cmdlets (excluding the Get-*Performance cmdlets) was also passing the -ItemType to Get-XIOItemInfo, when the -ItemType should _not_ be passed when getting item by URI
	affected:  Get-XIOBrick, Get-XIOCluster, Get-XIODataProtectionGroup, Get-XIOInitiator, Get-XIOInitiatorGroup, Get-XIOInitiatorGroupFolder, Get-XIOLunMap, Get-XIOSnapshot, Get-XIOSsd, Get-XIOStorageController, Get-XIOTarget, Get-XIOTargetGroup, Get-XIOVolume, Get-XIOVolumeFolder, Get-XIOXenv
-added support for getting Initiator by PortAddress
-added support for getting Initiator by InitiatorGrpId, including by pipeline
	Get-XIOInitiatorGroup someIG | Get-XIOInitiator
-added support for getting InitiatorGroup by InitatorGrpId, including by pipeline
	-Get-XIOInitator someInitiatorName | Get-XIOInitiatorGroup
	-Get-XIOInitiatorGroupFolder /someIGFolder/someDeeperFolder | Get-XIOInitiatorGroup
	-Get-XIOVolume myVol0 | Get-XIOInitiatorGroup
	-Get-XIOSnapshot mySnap0 | Get-XIOInitiatorGroup
-added support for getting InitiatorGroupFolder by InitatorGrpId, including by pipeline
	-Get-XIOInitiatorGroup someIG | Get-XIOInitiatorGroupFolder
-added support for getting Volume and Snapshot by VolId, including by pipeline
	Get-XIOVolumeFolder /someVolumeFolder | Get-XIOVolume
	Get-XIOVolumeFolder /someVolumeFolder | Get-XIOSnapshot
-added support for getting Volume and Snapshot by InitiatorGrpId, including by pipeline
	Get-XIOInitiatorGroup myIgroup0 | Get-XIOVolume
	Get-XIOInitiatorGroup myIgroup0 | Get-XIOSnapshot
-added support for getting VolumeFolder by VolId, including by pipeline
	Get-XIOVolume myVol0 | Get-XIOVolumeFolder



done for version 0.7.0, 30 Nov 2014
-added Connect-XIOServer, Disconnect-XIOServer
	-made cmdlets use connection creds instead of needing to specify credentials for every call (some rewriting likely needing for existing scripts:  add Connect-XIOServer, remove -Credential and -ComputerName from each specific call)
-added the rest of the New-XIO<specificItem> functions:
	New-XIOInitiator, New-XIOInitiatorGroupFolder, New-XIOLunMap, New-XIOVolumeFolder
-added ability to do "refresh interval" kind of thing for performance data returns, as emulated by:
	1..4 | %{Get-XIOCluster somexms01.dom.com -Credential $credSomeAdmin_noDom; Start-Sleep -Seconds 4}
	like, in xmcli:  show-targets-performance frequency=5
	have frequency and duration
	implemented as Get-XIOVolumePerformance, Get-XIOInitiatorPerformance, etc.
-added type data-protection-group (available in API v2.4 and up)
-added type events
-updated Get-XIOLunMap to accept new parameters for filtering return:  Volume, InitiatorGroup, HostLunId
-changed default port to 443, removing secondary port of 42503
-added URLEncode helper function
-added URI property to Get-XIOItemInfo output objects; keep that?  Useful in pipeline times?
-renamed "ig-name" property of XioItemInfo.LunMap object to "InitiatorGroup"
-added DataReduction property to cluster object (in addition to DedupeRatio); when setting the value on older-than-3.0 array, set it to DedupeRatio if data-reduction-ratio is $null



for 0.5.6:
17 Jun 2014:
added ig-folder: (/api/json/types/ig-folders)
	Name = name
	Index = index
	ParentFolder = "parent-folder-id"[1]
	NumIG = "num-of-direct-objs"
	FolderId = "folder-id"
	ParentFolderId = "parent-folder-id"[0]
	NumSubfolder = "num-of-subfolders"
	IOPS = [int64]iops
	"xms-id" = "xms-id"
added volume-folder: (/api/json/types/volume-folders)
	Name = name
	ParentFolder = "parent-folder-id"[1]
	NumVol = "num-of-vols"
	VolSizeTB = "vol-size" / 1GB
	FolderId = "folder-id"[0]
	ParentFolderId = "parent-folder-id"[0]
	NumSubfolder = "num-of-subfolders"
	Index = index
	IOPS = iops
	"xms-id" = "xms-id"


done 10 Jun 2014:
changed values for numbers in following obj types to have full precision, handling the rounding for display only (object has full precision):
	cluster, volume, ssd, target

DONE 21 May between the ellipses
NOW NEED TO update New-XioItem to use Get-XioItemInfo -URI <blah>
...
in Get-XioItemInfo:
add URI param

in process:
make datastructure with computername->arrayHRefs key/value pairs, then iterate through that to make the custom objects
if (paramsetname is URI) {
	single item hashtable
	computername is ([System.Uri]("http://some.com:42503/types/volumes/11")).DnsSafeHost
	strItemType_plural gets set to that part of the URI after types; something with ([RegEx]("^(/api/json)?/types/(?'itemType'[^/]+)/")).Match(([System.Uri]("http://somexms01.dom.com:42503/types/volumes/11")).AbsolutePath).Groups.Item("itemType").Value
	single href is the URI
}
else {
	<and, move the $strItemType_plural, $strRestCmd_base definition from Begin{} to this section>
	strItemType_plural is from default in Begin{} scriptblock
	array of hashtable(s) (based on num of computername values in param)
	foreach (computername in the array of computer names) {
		computername is computername
		arr of HREFs are gotten as they currently are
	}
}
then, for the part that makes the pretty objects:
foreach (item in the datastructure from above) {
	do the stuff
	need to adjust strThisXmsName to be "key" or whatever from the datastructure
	instead of "$ItemType_str", use $strItemType_plural and strip trailing "s"?
}
...
_then_, can use Get-XioItemInfo -URI... in New-XioItem (right?!)
notes for making New-XIOItem:
	determine port to use and, so, the base URI
	check if item of given name/idea already exists before trying to create
	if yes, write warning/error
	else, try to create
	return object created (by accessing content -> links -> href via Get-XioInfo -Uri <said href>)
	write-verbose any "Created" response from the WebRequest
	have -WhatIf




done:
18 May 2014:
set *IOPS property types to be numeric (were being returned as strings instead of numbers)
removed CreationTime from default properties displayed for volumes (via format.ps1xml)

17 May 2014:
added target-groups
	Name = name
	Index = index
	ClusterName = "sys-id"[1]
	"tg-id" = "tg-id"
	"sys-id" = "sys-id"
	"xms-id" = "xms-id"

14 May 2014
added NumSSD property to clusters objects (based on "num-of-ssds" from return)
added bricks
	Name = "brick-id"[1]
	Index = "index-in-system"
	ClusterName = "sys-id"[1]
	State = "brick-state"
	NumSSD = "num-of-ssds"
	NumNode = "num-of-nodes"
	NodeList = "node-list"
	"brick-id" = "brick-id"
	"rg-id" = "rg-id"
	"ssd-slot-array" = "ssd-slot-array"
	"xms-id" = "xms-id"
added xenvs
	Name = name
	Index = index
	CPUUsage = "cpu-usage"
	NumMdl = "num-of-mdls"
	"brick-id" = "brick-id"
	"xenv-id" = "xenv-id"
	"xenv-state" = "xenv-state"
	"xms-id" = "xms-id"



13 May 2014
show-initiator-groups
	Name = name
	Index = index
	NumInitiator = "num-of-initiators"
	NumVol = "num-of-vols"
	IOPS = iops
	"ig-id" = "ig-id"
	"xms-id" = "xms-id"
####### end v0.5.6


25 Apr 2014
show-targets:
	Name = name
	PortType = "port-type"
	PortWWN = "port-address"
	PortState = "port-state"
	#certainty-state ## not a direct property
	Index = index
	IOPS = iops
	UnalignedIOPS = "unaligned-iops"
	"fw-version" = "fw-version"
	"driver-version" = "driver-version"
	AccSizeOfRdTB = [Math]::Round($oContent."acc-size-of-rd" / 1GB, 2)
	AccSizeOfWrTB = [Math]::Round($oContent."acc-size-of-wr" / 1GB, 2)
