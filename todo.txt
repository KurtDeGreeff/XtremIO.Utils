todo:
-replace usage of singular item type string (essentially used for output type name creation; make config hsh table of plural item type string -> XIOItemInfo output object type)
	-use the config API item types as the ValidateSet value for ItemType in Get-XioItem function, so as not to need to upkeep such info in multiple places!
-replace "manual" enumeration of valid types for param values in Get-XIOEvent with legit Enums
	-do same for Get-XIOItemInfo?
-reorg dir -- put module files into new subfolder, XtremIO.Utils
	-include license file
-?add Cluster-Id type of property to output objects, for multi-cluster XMS situations
-?add "v2 URI" property to Tag objects (VolumeFolder, IniatorGroupFolder), so that Set- calls for them are easier to make
-add properties to objects (now available in XIOS v4):
	-to LunMap:  Certainty, InitiatorGrpId, ClusterId, TargetGrpId, VolumeId (these IDs in some way -- as object properties, like InitiatorGroup, Cluster, TargetGroup, Volume, or, just the IDs?)
	-to SSD:  certainty, *io-error*, num-bad-sectors, tag-list
-have config hsh of API type (like /types/ig-folders) -> XioItemInfo type (like IgFolder)
	-to remove the "strip an 's', title case the string, and remove the dash" antics that are in place now
	-need to update all places that specify API types as singular to use real API type name
-New-XIOInitiator:  add support for specifying "Operating System" value for initiator? (ESX, Windows, Other, etc); available in XIOS v4
-New-XIOLunMap:  take initiatorgroup from pipeline (by property of InitGrpId); currently expects IG _name_, and doesn't accept by pipeline (weak)
-?for PerfomanceCounter objects, need better way to present the .Counters property? (for easier export by user once retrieved)
-XIOS v4 properties/types to add/update/handle:
	-IG-GUID and vol-GUID are available in XIOLunMaps -- add those as property to XIOLunMap object (InitiatorGrpID, VolumeID)
	-on XMS object:
		-provide DateTime property from the ISO8601 date/time string that has timezone abbreviation in it
		-change uptime string to be a timespan (currently a string like, "144 days, 4:50:10.300000")
		-change NTPServer to be array of addresses (if empty, is "{}" right now)
	not doing yet:
		-consistency-group-volumes, as their properties returned seem to just be consistency groups, not consistency group volumes (properties match identically, and there are none of the Performance types of properties in the object as there are in the advertised object per the API guide)
			-and, from initial query of "https://xms.dom.com/api/json/types/consistency-group-volumes", the sub-property is "consistency-groups" (instead of the expected "consistency-group-volumes")
			-possible mix-up in the API?
		-SYR Notifiers -- no corresponding type found in API
		-getting performance counter for Tag EntityType needs more work (API call needs obj-list defined, apparently, and is throwing errors even when having done so)
-update (refactor) to use either hshParamsForGetXioInfo or hshParamsForGetXioItemInfo variable name in the GetXIOItem.ps1
-arrange properties in .NET obj definitions to be in desired order, instead of alphabetical?
-add object definitions of sub-property objects
-add Set-, Remove- cmdlets
	Set:
		-make sure that Set-XioItemInfo is solid, then work on:
		Initiator:  'port-address', 'initiator-name'
			for future (once supporitng iSCSI in this PSModule):  'initiator-authentication-user-name', 'initiator-authentication-password', 'initiator-discovery-user-name', 'initiator-discovery-password', 'cluster-authentication-user-name', 'cluster-authentication-password', 'cluster-discovery-user-name', 'cluster-discovery-password', 'remove-initiator-authentication-credentials', 'remove-initiator-discovery-credentials', 'remove-cluster-authentication-credentials', 'remove-cluster-discovery-credentials'
		InitiatorGroup:  'initiator-group-name'
		InitiatorGroupFolder:  'new-caption'
		Volume:	 'vol-size', 'vol-name', 'small-io-alerts', 'unaligned-io-alerts', 'vaai-tp-alerts'
		VolumeFolder:  'new-caption'
		-once done, un-export Set-XIOItemInfo?  Or, leave it exported?
	Remove:
		Initiator, InitiatorGroup, InitiatorGroupFolder, LunMap, Volume, VolumeFolder, Snapshot
-update Parent* properties of older objects to be obj like: <parentType>Id, Name, Index as returned by helper function
-include support for Get-XIOSnapshotScheduler to get by Volume Name or Volume Id (and, so, accept from pipeline, too)?
-add pipelining abilities for things like:
	Get-XIODAE | Get-XIODAEController
	Get-XIODAEController | Get-XIODAE
	Get-XIODAEPsu | Get-XIODAE
	Get-XIOBBU | Get-XIOStorageController
	Get-XIO<BBU,DAE,DAEController> | Get-XIOCluster (since they have ClusterId property)
	Get-XIOStorageController | Get-XIOLocalDisk
	Get-XIOLocalDisk | Get-XIOStorageController
	Get-XIOSlot | Get-XIOSsd
	Get-XIOSnapshotSet | Get-XIOVolume
	Get-XIOTag | Get-XIO<any of the six object types -- Volume, ConsistecyGroup, SnapshotSet, InitiatorGroup, Initiator, SnapshotScheduler
	Get-XIOInitiatorGroup | Get-XIOLunMap (just by IG name until adding support for "by IGrpID" when working on XIOSv4 things)
	Get-XIOVolume | Get-XIOLunMap (just by Volume name until adding support for "by IGrpID" when working on XIOSv4 things)
		-on Volume object, LunMappingList property is currently array of three items (two arrays and an int), like:  @(<initiator group ID string>, <initiator group name>, <initiator group object index number>), @(<target group ID>, <target group name>, <target group object index number>), <host LUN ID>
		-need to break this apart, have MappingIdList property or so, and be able to get XIOLunMap via MappingId
	## currently behaves unexpectedly when using something like:
	Get-XIOInitiatorGroupFolder | Get-XIOInitiatorGroupFolderPerformance
	#  Get-XIOInitiatorGroupFolder -computer *01* | Get-XIOInitiatorGroupFolderPerformance -DurationSeconds 15
	#   outputs like:
<#	Name         WriteBW_MBps   WriteIOPS     ReadBW_MBps   ReadIOPS      BW_MBps      IOPS       TotWriteIOs  TotReadIOs
	----         ------------   ---------     -----------   --------      -------      ----       -----------  ----------
	/            21.153         851           17.813        825           38.966       1676       29298600763  77718380223
	VERBOSE: Starting sleep for '5' sec; ending run at/about 2014.Nov.13 18:24:52 (duration of '15' sec)
	/            29.306         769           27.256        759           56.562       1528       29298604621  77718384024
	VERBOSE: Starting sleep for '5' sec; ending run at/about 2014.Nov.13 18:24:52 (duration of '15' sec)
	/            7.345          550           6.692         630           14.037       1180       29298607403  77718387183
	/VDI04       7.345          550           6.692         630           14.037       1180       29298607403  77718387183
	VERBOSE: Starting sleep for '5' sec; ending run at/about 2014.Nov.13 18:25:03 (duration of '15' sec)
	/VDI04       5.918          609           12.021        739           17.938       1348       29298610477  77718390880
	VERBOSE: Starting sleep for '5' sec; ending run at/about 2014.Nov.13 18:25:03 (duration of '15' sec)
	/VDI04       5.918          609           12.021        739           17.938       1348       29298610477  77718390880

	instead of the expected
	Name         WriteBW_MBps   WriteIOPS     ReadBW_MBps   ReadIOPS      BW_MBps      IOPS       TotWriteIOs  TotReadIOs
	----         ------------   ---------     -----------   --------      -------      ----       -----------  ----------
	/            21.153         851           17.813        825           38.966       1676       29298600763  77718380223
	/VDI04       7.345          550           6.692         630           14.037       1180       29298607403  77718387183
	VERBOSE: Starting sleep for '5' sec; ending run at/about 2014.Nov.13 18:24:52 (duration of '15' sec)
	/            29.306         769           27.256        759           56.562       1528       29298604621  77718384024
	/VDI04       7.345          550           6.692         630           14.037       1180       29298607403  77718387183
	VERBOSE: Starting sleep for '5' sec; ending run at/about 2014.Nov.13 18:24:52 (duration of '15' sec)
	/            7.345          550           6.692         630           14.037       1180       29298607403  77718387183
	/VDI04       7.345          550           6.692         630           14.037       1180       29298607403  77718387183
	VERBOSE: Starting sleep for '5' sec; ending run at/about 2014.Nov.13 18:25:03 (duration of '15' sec)
	/            7.345          550           6.692         630           14.037       1180       29298607403  77718387183
	/VDI04       5.918          609           12.021        739           17.938       1348       29298610477  77718390880
	VERBOSE: Starting sleep for '5' sec; ending run at/about 2014.Nov.13 18:25:03 (duration of '15' sec)
	/            7.345          550           6.692         630           14.037       1180       29298607403  77718387183
	/VDI04       5.918          609           12.021        739           17.938       1348       29298610477  77718390880
#>
-update pipelining behavior for things like:
	Get-XioVolumeFolder /someFolderWithNoDirectVolumes | Get-XioVolume
		-to just return $null, instead of throwing error about " The input object cannot be bound to any parameters for the command either because the command does not take pipeline input or the input and its properties do not match any of the parameters that take pipeline input", which happens when .VolIdList is $null in this example
-add Catch for explicit DownloadString exception:
	VERBOSE: Uh-oh -- something went awry trying to get data from that URI
	('https://somexms.dom.com/api/json/types'). A pair of guesses:  no such XMS appliance, or that item type is not
	valid in the API version on the XMS appliance that you are contacting, maybe?  Should handle this in future module
	release.  Throwing error for now.
	Connect-XIOServer : Failed to connect to XMS 'somexms.dom.com'.  See error below for details
	At line:1 char:1
	+ Connect-XIOServer -ComputerName somexms.dom.com -TrustAllCert -Credential  ...
	+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		+ CategoryInfo          : NotSpecified: (:) [Write-Error], WriteErrorException
		+ FullyQualifiedErrorId : Microsoft.PowerShell.Commands.WriteErrorException,Connect-XIOServer

	Exception calling "DownloadString" with "1" argument(s): "The operation has timed out"
	At \\path\to\XtremIO.Utils\XIO_SupportingFunctions.ps1:58 char:4
	+             $oWebClient.DownloadString($hshParamsForRequest["Uri"]) | ConvertFrom-Json
	+             ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		+ CategoryInfo          : NotSpecified: (:) [], MethodInvocationException
		+ FullyQualifiedErrorId : WebException
-upgrade New-XIOVolumeFolder, New-XIOInitiatorGroupFolder to make full, deep path of folders (for when parent folder heirarchy does not yet exist)
	-example:  New-XIOVolumeFolder -Name newDeepFolder -ParentFolder /someVolume/Folder/ThatDoes/NotYet/Exist
	-needs to iterate through those parents from the root
	-and, make it just use a full path for the new folder, not Name and ParentFolder?  Like:  New-XIOVolumeFolder -Path /someVolume/Folder/ThatDoes/NotYet/Exist/myNewFolder
-check into / remove use of deprecated properties, if any, from list: (per v3.0.1 REST API guide, p12)
	-In version 3.0, the following object parameters are not in use and have been deprecated:
		-Cluster object:
			-max-snapshots-per-volume
			-meta-data-utilization-level
			-meta-data-utilization
			-vamd-memory
			-vamd-memory-in-use
			-max-cgs-per-volume
			-max-cgs
			-num-of-r-mdls
			-max-snapsets-per-cg
			-max-vol-per-cg
			-num-of-d-mdls
			-min-num-of-ssds-per-healthy-rg
			-num-of-c-mdls
		-Storage Controller object:
			-eth-link-health-level
	-In version 3.0.1, the following object parameters are not in use and have been deprecated:
		-Storage Controller object:
			-hw-revision
	-also, others listed on p198 of v3.0.1 REST API guide
-add New-XIOSnapshot at some point
-item types for which to add support in module:
	## old and new APIs
	iscsi-portals
	iscsi-routes
-add ability to create ISCSI initiators via New-XIOInitiator
	-the overall params for creating new initiator, per CLI:
		cluster-authentication-password         No                  CHAP Authentication Cluster Passwordstring
		cluster-authentication-user-name        No                  CHAP Authentication Cluster User Namestring
		cluster-discovery-password              No                  CHAP Discovery Cluster Password
		cluster-discovery-user-name             No                  CHAP Discovery Cluster User Namestring
		ig-id                                   Yes                 IG ID                         name or index
		initiator-authentication-password       No                  CHAP Authentication Initiator Passwordstring
		initiator-authentication-user-name      No                  CHAP Authentication Initiator User Namestring
		initiator-discovery-password            No                  CHAP Discovery Initiator Password
		initiator-discovery-user-name           No                  CHAP Discovery Initiator User Namestring
		initiator-name                          No                  Initiator Name                string
		port-address                            Yes                 Port Address                  string
-for Get-XIOSnapshot:  add URI Param option for "ancestor-vol-id"?  available via xmcli
-for Get-XIOVolume:  add URI Param option for "sg-id" (snapshot group ID)?  available via xmcli
-change wording around Disable-CertValidation to refer to the output as ServerCertificateValidationCallback, not CertificatePolicy
-?eventually for Open-XIOMgmtConsole:  only act on existing XMS connections (as the cmdlet will need the XMS software version in order to create the correct URL to the JNLP file); or, will this cmdlet change to open the web management console instead of the Java management console, once the Web UI takes over?
-may need to remove XioStoredCred support at some point, now that Connect-XIOServer is available; if so, do via deprecation; _Find-CredentialToUse goes away at that point, too?
-potentially once API allows for things like "?folder-id=b38b38123b38123asdfb38b38123" in the query string, so that can use IDs in URI?  Until then, these IDs would only be used to filter items _after_ they've been retrieved from the XMS appliance
	-add InitiatorGroupList_raw = .direct-list, InitiatorGroupUID = {just those IG UIDs} to IgFolder objects
		-same for VolumeList_raw = .direct-list for VolumeFolder objects
	-add UID to volumes, initiators, initiator groups
		-will allow for getting IGs from IGFolder, volumes from Volume folder, other stuff for IGs?
-?add a Get-XIOUtilsConfiguration function to report things like the filespec of the StoredXioCred
-?add a Set-XIOUtilsConfiguration function to set things like the default port to use, and $true/$false for TrustAllCert
-?add "if ($PsCmdlet.ShouldProcess())" portion to New-XIOVolume, around the New-XioItem call, so as to have better WhatIf output?
-?add "small" and "unaligned" performance items, too? (available in xmcli)
-address performance properties that are no longer "real" from the API, but still presented as properties/values on objects; for example:  InitiatorGroupFolder objects have an IOPS property that may actually have no value, but that gets cast to an Int in the SupportingFunctions, and becomes "0" for the returned object
-added URI property to Get-XIOItemInfo output objects; keep that?  Useful in pipeline times?
-try Invoke-WebRequest in place of the WebClient .NET class (this guy reports success vs. Invoke-RestMethod when same symptoms, but uses an IDontCare CertPolicy:  https://communities.vmware.com/thread/466166)
-once API exposes "move-to-folder" functionality, make Move- cmdlets for Volumes, VolumeFolders, InitiatorGroups, InitiatorGroupFolders
	-not available as of XIOS v3.0.1
-change the .Guid property on API v1 objects to have value that, if .guid property of API obj does not exist, then use <objType>-id[0] (the Id part of the <id>,<name>,<index> array)
	-then, can more universally use that Guid in pipelining and whatnot



doing:
[feat_ImproveV1TypeDef]
-add "normal" properties to API v1 objects (properties that are now on API v2 objects, where possible, like GUID and ID and whatnot)
	-also, inherit from base classes where appropriate
	-deprecated:
		On Brick:
			-NumNode -> NumStorageController
			-NodeList -> StorageController, a collection of objects with ID, Name, Index properties, instead of just lists of the properties
		On Cluster:
			-BrickList -> Brick, a collection of objects with ID, Name, Index properties, instead of just lists of the properties
			-InfiniBandSwitchList -> InfiniBandSwitch, a collection of objects with ID, Name, Index properties, instead of just lists of the properties
		On DataProtectionGroup:
			-BrickIndex, BrickName -> Brick, a collection of objects with ID, Name, Index properties, instead of just the properties
			-ClusterIndex, ClusterName -> Cluster, objects with ID, Name, Index properties, instead of just the properties
			-RGrpId -> DataProtectionGrpId, the ID of the DataProtectionGroup (instead of an array of id/name/index)
		On LunMap:
			-MappingId -> LunMapId, the ID of the LunMap (instead of an array of id/name/index)
			-MappingIndex -> Index, to have the standard property name used across other objects
		On SSD:
			-EnabledState -> Enabled, to have the standard property name used across other objects
			-ModelName -> Model, to have the standard property name used across other objects
			-ObjSeverity -> Severity, to have the standard property name used across other objects
			-RGrpId -> DataProtectionGroup, objects with ID, Name, Index properties, instead of just the properties
	-changed:
		On DataProtectionGroup:
			-added Guid
		On IgFolder:
			-FolderId is now the unique identifier of the folder, instead of the array of <id>,<name>,<index>; this is to align with the *Id properties of the rest of the objects in the module -- they are just the Id string value, not the array of all three properties. And, this <objType>Id property is essentially the Guid property of the object, but, older XIOS did not present the Guid property directly; so, <objType>Id and Guid values should be the same on objects from XIOS v4 and new; on objects from XIOS older than v3, the Guid property will be empty string
			-added Guid
		On Initiator:
			-InitiatorId is now the unique identifier of the intiator, instead of the array of <id>,<name>,<index>; this is like the change to the FolderId property of IgFolder objects above
			-added Guid, InitiatorGroup properties
		On LunMap:
			-added LunMapId, that is the unique identifier of the folder; will eventually be the favored identifying property, over the deprecated MappingId property
		On SSD:
			-added DataProtectionGroup property
			-SsdId is now the unique identifier of the SSD, instead of the array of <id>,<name>,<index>; this is like the change to the FolderId property of IgFolder objects above
	doing:
	done:  Brick, Cluster, DataProtectionGroup, IgFolder, Initiator, InitiatorGroup, LunMap, SSD
-deprecate EnabledState property on SSDs and StorageControllers, add Enabled boolean property
	-see https://msdn.microsoft.com/en-us/library/system.obsoleteattribute%28v=vs.110%29.aspx
	-System.ObsoleteAttribute might only work in binary module, not in advanced function based module, at least at one point, per https://rkeithhill.wordpress.com/2012/04/29/powershell-v3-obsoleteattribute/
	-so, included System.ObsoleteAttribute statements in type definitions, but need to make this loud and clear elsewhere


done for version 0.next (after v0.9.0):
[bf_OpenXioMgmtConsole]
-Open-XIOMgmtConsole:  jnlp filename is XIOS version specific, now
	-added Get-XIOXMS and use its SW-Version to get the "4.0.1-7" string that is inserted into the $strJnlpFileUri filename; also, change to HTTPS from HTTP for XIOS v4 and newer
	-for XIOS v4 and newer, opening the management console with this cmdlet expects there to be an XioConnection in place to the given XMS (as established by Connect-XIOServer), as the connection object holds version info that is necessary for formulating the proper URL for getting the JNLP's URL
[feat_BetterWebExcepReporting]
-investigated replacing use of WebClient with HttpWebRequest objects for internal function that does the GET web communications
	-noted speed diff for API request intensive cmdlets (Get-XIOLunMap, for example):  it was nearly twice as fast with the WebClient class versus the HttpWebRequest class; sticking with WebClient for now
-added additional verbose error info from WebException in InnnerException of returned error from web call (if any) for when issue getting items from API (helpful for troubleshooting, especially when crafting one's own URIs)
[feat_AboutHelpTxt]
-add about_XtremIO.Utils.help.txt
	-with the general "here's the module, here are some ways to use it"
[bf_ErrorWithPSv5]
-importing module in PowerShell v5 Production Preview results in multiple errors of:  Multiple ambiguous overloads found for ".ctor" and the argument count: "1".
	-due to OutputType specifying a type that was not yet defined in the session, which was due to the adding of types occurring _after_ the dot-source of the given .ps1
	-changed order of dot-sourcing of .ps1 files as module loads, moving the init ps1 to the front of the order, so that given types are defined by the time some code alludes to the types
[bf_MoreErrorInPSv5]
fix for use in PSv5 (throwing errors when invoking):
	properties that were not optional per the object type definition, but that might be null in the New-Object call:
	- TagList property was System.Object[]; made System.Object (nullable by default)
		Get-XIOBBU
		Get-XIODAE
		Get-XIOInfinibandSwitch
		Get-XIOLocalDisk
		Get-XIOSnapshotSet
	- same System.Object[] -> System.Object property type declartion in class definition for other properties:
		Get-XIOInitiatorGroupFolder
		Get-XIOInitiatorGroupFolderPerformance
		Get-XIOSnapshot
		Get-XIOTag
		Get-XIOVolume
		Get-XIOVolumeFolder
		Get-XIOVolumeFolderPerformance
		Get-XIOVolumePerformance
	- difference in PSv5 in Where-Object result in function internals for creating the URL:
		Get-XIOPerformanceCounter -- seemingly off/bad/different URL

## things below here are in changelog/readme








done for previous versions:  moved to done.txt




## for observing property changes to handle between versions
$strV40XmsName = "somexms00.dom.com"
$strV30XmsName = "somexms01.dom.com"
$strV241XmsName = "somexms02.dom.com"
$strV223XmsName = "somexms3.dom.com"
$credSomeAdmin_noDom = Get-Credential someXioAdmin

$arrTypesFor30 = (Get-XIOItemInfo -Credential $credSomeAdmin_noDom -URI_str https://$strV30XmsName/api/json/types -ReturnFullResponse_sw).children
$arrTypesFor241 = (Get-XIOItemInfo -Credential $credSomeAdmin_noDom -URI_str https://$strV241XmsName/api/json/types -ReturnFullResponse_sw).children
$arrTypesInBothVersions = $arrTypesFor30 | %{$_.name} | ?{($arrTypesFor241 | %{$_.Name}) -contains $_}
$hshObjPropertyDifferencesInfo = @{}
foreach ($strItemtype in ($arrTypesInBothVersions | %{$_.TrimEnd("s")})) {
#foreach ($strItemtype in $arrTypesInBothVersions) {
	Write-Verbose -Verbose "working on '$strItemtype'"
	$arrXioClusterInfoRaw_v241 = Get-XIOItemInfo -ItemType $strItemtype -computer $strV241XmsName -TrustAllCert -ReturnFullResponse -port 443 -cred $credSomeAdmin_noDom
	$arrXioClusterInfoRaw_v30 = Get-XIOItemInfo -ItemType $strItemtype -computer $strV30XmsName -TrustAllCert -ReturnFullResponse -port 443 -cred $credSomeAdmin_noDom
	## not working, yet
	#$arrXioClusterInfoRaw_v241 = Get-XIOItemInfo -Uri https://$strV241XmsName/api/json/types/$strItemtype -TrustAllCert -ReturnFullResponse -cred $credSomeAdmin_noDom
	#$arrXioClusterInfoRaw_v30 = Get-XIOItemInfo -ItemType $strItemtype -computer $strV30XmsName -TrustAllCert -ReturnFullResponse -port 443 -cred $credSomeAdmin_noDom

	$hshObjPropertyDifferencesInfo["$strItemtype"] = @{
		"inV241NotInV30" = ($arrXioClusterInfoRaw_v241.content | gm -Type NoteProperty).Name | ?{($arrXioClusterInfoRaw_v30.content | gm -Type NoteProperty).name -notcontains $_}
		"inV30NotInV241" = ($arrXioClusterInfoRaw_v30.content | gm -Type NoteProperty).Name | ?{($arrXioClusterInfoRaw_v241.content | gm -Type NoteProperty).name -notcontains $_}
	} ## end hashtable
}


## between 3.0 and 2.2.3
$arrTypesFor30 = (Get-XIOItemInfo -Credential $credSomeAdmin_noDom -URI_str https://$strV30XmsName/api/json/types -ReturnFullResponse_sw).children
$arrTypesFor223 = (Get-XIOItemInfo -URI_str https://$strV223XmsName/api/json/types -ReturnFullResponse_sw).children
$arrTypesInBothVersions = $arrTypesFor30 | %{$_.name} | ?{($arrTypesFor223 | %{$_.Name}) -contains $_}
$hshObjPropertyDifferencesInfo = @{}
foreach ($strItemtype in ($arrTypesInBothVersions | %{$_.TrimEnd("s")})) {
#foreach ($strItemtype in $arrTypesInBothVersions) {
	Write-Verbose -Verbose "working on '$strItemtype'"
	$arrXioClusterInfoRaw_v223 = Get-XIOItemInfo -ItemType $strItemtype -computer $strV223XmsName -TrustAllCert -ReturnFullResponse -port 443
	$arrXioClusterInfoRaw_v30 = Get-XIOItemInfo -ItemType $strItemtype -computer $strV30XmsName -TrustAllCert -ReturnFullResponse -port 443 -cred $credSomeAdmin_noDom
	## not working, yet
	#$arrXioClusterInfoRaw_v223 = Get-XIOItemInfo -Uri https://$strV223XmsName/api/json/types/$strItemtype -TrustAllCert -ReturnFullResponse -cred $credSomeAdmin_noDom
	#$arrXioClusterInfoRaw_v30 = Get-XIOItemInfo -ItemType $strItemtype -computer $strV30XmsName -TrustAllCert -ReturnFullResponse -port 443 -cred $credSomeAdmin_noDom

	$hshObjPropertyDifferencesInfo["$strItemtype"] = @{
		"inV223NotInV30" = ($arrXioClusterInfoRaw_v223.content | gm -Type NoteProperty).Name | ?{($arrXioClusterInfoRaw_v30.content | gm -Type NoteProperty).name -notcontains $_}
		"inV30NotInV223" = ($arrXioClusterInfoRaw_v30.content | gm -Type NoteProperty).Name | ?{($arrXioClusterInfoRaw_v223.content | gm -Type NoteProperty).name -notcontains $_}
	} ## end hashtable
}


<#  older (2.4, 2.2.3)
foreach ($strItemtype in @("cluster", "initiator-group", "initiator", "lun-map", "target-group", "target", "volume", "brick", "ssd", "storage-controller", "xenv")) {
	Write-Verbose -Verbose "working on '$strItemtype'"
	$arrXioClusterInfoRaw_v24 = Get-XIOItemInfo -ItemType $strItemtype -computer $strV24XmsName -TrustAllCert -ReturnFullResponse -port 443 -cred $credSomeAdmin_noDom
	$arrXioClusterInfoRaw_v223 = Get-XIOItemInfo -ItemType $strItemtype -computer $strV223XmsName -TrustAllCert -ReturnFullResponse -port 443
	$hshObjPropertyDifferencesInfo["$strItemtype"] = @{
		"inV24NotInV223" = ($arrXioClusterInfoRaw_v24.content | gm -Type NoteProperty).Name | ?{($arrXioClusterInfoRaw_v223.content | gm -Type NoteProperty).name -notcontains $_}
		"inV223NotInV24" = ($arrXioClusterInfoRaw_v223.content | gm -Type NoteProperty).Name | ?{($arrXioClusterInfoRaw_v24.content | gm -Type NoteProperty).name -notcontains $_}
	} ## end hashtable
}
#>

## get all properties and values, sorted by property name
(Get-XIOItemInfo -ItemType storage-controller -ReturnFullResponse_sw).content | %{Select -InputObject $_ -Property (gm -in $_ -MemberType NoteProperty | %{$_.name} | sort)}
(Get-XIOItemInfo -Uri https://somexms01.dom.com/api/json/types/data-protection-groups/1 -ReturnFullResponse_sw).content | %{Select -InputObject $_ -Property (gm -in $_ -MemberType NoteProperty | %{$_.name} | sort)}

-clusters obj
	-add "brick-list" property (available in 2.2.3 and 2.4, at least)


testing:
gc GetXIOItem.ps1 | sls "^\s+.Example" -Context 0,1 | select -ExpandProperty Context | select -ExpandProperty postcontext
