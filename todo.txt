todo:
-once .Cluster type of property is added to cluster-specific objects:
	-for Volume: update New-XIOSnapshot to take cluster value from Volume object when Volume object taken from pipeline (and if that particular Volume has a Cluster property value)
	-this is also in prep for better pipelining, which will need to get Cluster info from pipeline object coming through (along with .ComputerName, right?)
	-once added to Volume and Tag, update New-XIOConsistencyGroup to take it from Volume/Tag objects if those were passed as values to -Volume or -Tag?  Else, user has to specify the vol/tag _and_ the cluster, when that should be gleanable from the vol/tag objects themselves (right?)
-enable setting Tag for an object -- should be done via New-XIOTagAssignment type of cmdlet
-change the .Guid property on API v1 objects to have value that, if .guid property of API obj does not exist, then use <objType>-id[0] (the Id part of the <id>,<name>,<index> array)
	-then, can more universally use that Guid in pipelining and whatnot
-update (refactor) to use either hshParamsForGetXioInfo or hshParamsForGetXioItemInfo variable name in the GetXIOItem.ps1
-replace "manual" enumeration of valid types for param values in Get-XIOEvent with legit Enums
	-do same for Get-XIOItemInfo?
-New-XIOLunMap:  take initiatorgroup from pipeline (by property of InitGrpId); currently expects IG _name_, and doesn't accept by pipeline (weak)
-XIOS v4 properties/types to add/update/handle:
	-to LunMap:  Certainty, InitiatorGrpId, ClusterId, TargetGrpId, VolumeId (these IDs in some way -- as object properties, like InitiatorGroup, Cluster, TargetGroup, Volume, or, just the IDs?)
	-to SSD:  certainty, *io-error*, num-bad-sectors, tag-list
	-to StorageController:  more full InfinibandSwitch properties, DIMM health info, LocalDisk info; remove obsolete:  encryption* properties
	-IG-GUID and vol-GUID are available in XIOLunMaps -- add those as property to XIOLunMap object (InitiatorGrpID, VolumeID)
	-on XMS object:
		-provide DateTime property from the ISO8601 date/time string that has timezone abbreviation in it
		-change uptime string to be a timespan (currently a string like, "144 days, 4:50:10.300000")
		-change NTPServer to be array of addresses (if empty, is "{}" right now)
	not doing yet:
		-consistency-group-volumes, as their properties returned seem to just be consistency groups, not consistency group volumes (properties match identically, and there are none of the Performance types of properties in the object as there are in the advertised object per the API guide)
			-and, from initial query of "https://xms.dom.com/api/json/types/consistency-group-volumes", the sub-property is "consistency-groups" (instead of the expected "consistency-group-volumes")
			-possible mix-up in the API?
		-SYR Notifiers -- no corresponding type found in API
		-getting performance counter for Tag EntityType needs more work (API call needs obj-list defined, apparently, and is throwing errors even when having done so)
-expand availability of -Property parameter on other Get-* cmdlets as it makes sense (already done on Get-XIOLunMap)
	-include "translation" config item to go from "nice" property names (as returned on XIOItemInfo.* objects) to API Objects' property names, so that consumer does not need to know the API property names
	-will need to update type definitions and the hsh table definitions for the eventual New-Object call to expect/handle/allow $null values, so as to be able to populate only some property values for the return object, as done for Volume/Snapshot, LunMap objects
-shorten param names in cmdlets to more PowerShell-like (make aliases for now, but deprecate the longer param names?)
-add Remove- cmdlets
	Remove-XIO*:
		Initiator, InitiatorGroup, InitiatorGroupFolder, LunMap, Volume, VolumeFolder, Snapshot, TagAssignment
-update Parent* properties of older objects to be obj like: <parentType>Id, Name, Index as returned by helper function
-include support for Get-XIOSnapshotScheduler to get by Volume Name or Volume Id (and, so, accept from pipeline, too)?
-for when removing InitiatorGrpIdList from InitiatorGroupFolder object (deprecated after v0.11), remove the three spots that take it from pipeline via:  ValueFromPipelineByPropertyName=$true)][Alias("InitiatorGrpIdList")]
-add pipelining abilities for things like:
	Get-XIODAE | Get-XIODAEController
	Get-XIODAEController | Get-XIODAE
	Get-XIODAEPsu | Get-XIODAE
	Get-XIOBBU | Get-XIOStorageController
	Get-XIO<BBU,DAE,DAEController> | Get-XIOCluster (since they have Cluster kind of property)
	Get-XIOStorageController | Get-XIOLocalDisk
	Get-XIOLocalDisk | Get-XIOStorageController
	Get-XIOSlot | Get-XIOSsd
	Get-XIOSnapshotSet | Get-XIO[Volume|Snapshot]
	Get-XIO[Volume|Snapshot] | Get-XIOSnapshot
		-need to update Volume and Snapshot objects:
			DestSnapList property to be list of Snapshot <id,name,index> objects instead of list of arrays of strings
			AncestorVolId property to list of Volume <id,name,index> objects instead of list of arrays of strings
	Get-XIOVolume | Get-XIOSnapshotSet
	Get-XIOSnapshot | Get-XIOSnapshotSet
	Get-XIOTag | Get-XIO<any of the six object types -- Volume, ConsistecyGroup, SnapshotSet, InitiatorGroup, Initiator, SnapshotScheduler
	Get-XIOInitiatorGroup | Get-XIOLunMap (just by IG name until adding support for "by IGrpID" when working on XIOSv4 things)
	Get-XIO[Volume|Snapshot] | Get-XIOLunMap (just by Volume name until adding support for "by IGrpID" when working on XIOSv4 things)
		-on Volume object, LunMappingList property is currently array of three items (two arrays and an int), like:  @(<initiator group ID string>, <initiator group name>, <initiator group object index number>), @(<target group ID>, <target group name>, <target group object index number>), <host LUN ID>
		-need to break this apart, have MappingIdList property or so, and be able to get XIOLunMap via MappingId, or the LunMapList that has LunMap <id,name,index> objects instead of list of arrays of strings
	## currently behaves unexpectedly when using something like:
	Get-XIOInitiatorGroupFolder | Get-XIOInitiatorGroupFolderPerformance
	#  Get-XIOInitiatorGroupFolder -computer *01* | Get-XIOInitiatorGroupFolderPerformance -DurationSeconds 15
	#   outputs like:
<#	Name         WriteBW_MBps   WriteIOPS     ReadBW_MBps   ReadIOPS      BW_MBps      IOPS       TotWriteIOs  TotReadIOs
	----         ------------   ---------     -----------   --------      -------      ----       -----------  ----------
	/            21.153         851           17.813        825           38.966       1676       29298600763  77718380223
	VERBOSE: Starting sleep for '5' sec; ending run at/about 2014.Nov.13 18:24:52 (duration of '15' sec)
	/            29.306         769           27.256        759           56.562       1528       29298604621  77718384024
	VERBOSE: Starting sleep for '5' sec; ending run at/about 2014.Nov.13 18:24:52 (duration of '15' sec)
	/            7.345          550           6.692         630           14.037       1180       29298607403  77718387183
	/fol04       7.345          550           6.692         630           14.037       1180       29298607403  77718387183
	VERBOSE: Starting sleep for '5' sec; ending run at/about 2014.Nov.13 18:25:03 (duration of '15' sec)
	/fol04       5.918          609           12.021        739           17.938       1348       29298610477  77718390880
	VERBOSE: Starting sleep for '5' sec; ending run at/about 2014.Nov.13 18:25:03 (duration of '15' sec)
	/fol04       5.918          609           12.021        739           17.938       1348       29298610477  77718390880

	instead of the expected
	Name         WriteBW_MBps   WriteIOPS     ReadBW_MBps   ReadIOPS      BW_MBps      IOPS       TotWriteIOs  TotReadIOs
	----         ------------   ---------     -----------   --------      -------      ----       -----------  ----------
	/            21.153         851           17.813        825           38.966       1676       29298600763  77718380223
	/fol04       7.345          550           6.692         630           14.037       1180       29298607403  77718387183
	VERBOSE: Starting sleep for '5' sec; ending run at/about 2014.Nov.13 18:24:52 (duration of '15' sec)
	/            29.306         769           27.256        759           56.562       1528       29298604621  77718384024
	/fol04       7.345          550           6.692         630           14.037       1180       29298607403  77718387183
	VERBOSE: Starting sleep for '5' sec; ending run at/about 2014.Nov.13 18:24:52 (duration of '15' sec)
	/            7.345          550           6.692         630           14.037       1180       29298607403  77718387183
	/fol04       7.345          550           6.692         630           14.037       1180       29298607403  77718387183
	VERBOSE: Starting sleep for '5' sec; ending run at/about 2014.Nov.13 18:25:03 (duration of '15' sec)
	/            7.345          550           6.692         630           14.037       1180       29298607403  77718387183
	/fol04       5.918          609           12.021        739           17.938       1348       29298610477  77718390880
	VERBOSE: Starting sleep for '5' sec; ending run at/about 2014.Nov.13 18:25:03 (duration of '15' sec)
	/            7.345          550           6.692         630           14.037       1180       29298607403  77718387183
	/fol04       5.918          609           12.021        739           17.938       1348       29298610477  77718390880
#>
-update pipelining behavior for things like:
	Get-XIOVolumeFolder /someFolderWithNoDirectVolumes | Get-XIOVolume
		-to just return $null, instead of throwing error about " The input object cannot be bound to any parameters for the command either because the command does not take pipeline input or the input and its properties do not match any of the parameters that take pipeline input", which happens when .VolIdList is $null in this example
-add Catch for explicit DownloadString exception:
	VERBOSE: Uh-oh -- something went awry trying to get data from that URI
	('https://somexms.dom.com/api/json/types'). A pair of guesses:  no such XMS appliance, or that item type is not
	valid in the API version on the XMS appliance that you are contacting, maybe?  Should handle this in future module
	release.  Throwing error for now.
	Connect-XIOServer : Failed to connect to XMS 'somexms.dom.com'.  See error below for details
	At line:1 char:1
	+ Connect-XIOServer -ComputerName somexms.dom.com -TrustAllCert -Credential  ...
	+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		+ CategoryInfo          : NotSpecified: (:) [Write-Error], WriteErrorException
		+ FullyQualifiedErrorId : Microsoft.PowerShell.Commands.WriteErrorException,Connect-XIOServer

	Exception calling "DownloadString" with "1" argument(s): "The operation has timed out"
	At \\path\to\XtremIO.Utils\XIO_SupportingFunctions.ps1:58 char:4
	+             $oWebClient.DownloadString($hshParamsForRequest["Uri"]) | ConvertFrom-Json
	+             ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		+ CategoryInfo          : NotSpecified: (:) [], MethodInvocationException
		+ FullyQualifiedErrorId : WebException
-check into / remove use of deprecated properties, if any, from list: (per v3.0.1 REST API guide, p12)
	-In version 3.0, the following object parameters are not in use and have been deprecated:
		-Cluster object:
			-max-snapshots-per-volume
			-meta-data-utilization-level
			-meta-data-utilization
			-vamd-memory
			-vamd-memory-in-use
			-max-cgs-per-volume
			-max-cgs
			-num-of-r-mdls
			-max-snapsets-per-cg
			-max-vol-per-cg
			-num-of-d-mdls
			-min-num-of-ssds-per-healthy-rg
			-num-of-c-mdls
		-Storage Controller object:
			-eth-link-health-level
	-In version 3.0.1, the following object parameters are not in use and have been deprecated:
		-Storage Controller object:
			-hw-revision
	-also, others listed on p198 of v3.0.1 REST API guide
-change wording around Disable-CertValidation to refer to the output as ServerCertificateValidationCallback, not CertificatePolicy
-address performance properties that are no longer "real" from the API, but still presented as properties/values on objects; for example:  InitiatorGroupFolder objects have an IOPS property that may actually have no value, but that gets cast to an Int in the SupportingFunctions, and becomes "0" for the returned object
	-need to make these nullable? (can we?)
-try Invoke-WebRequest in place of the WebClient .NET class (this guy reports success vs. Invoke-RestMethod when same symptoms, but uses an IDontCare CertPolicy:  https://communities.vmware.com/thread/466166)
-add Update-Snapshot to correspond to "refresh" operation in mgmt GUI
	-Create a Snapshot and reassign on a Volume, Consistency Group or Snapshot Set (see Table 4, on page 192).
		Note: Refer to example use cases for taking Snapshots and reassigning on a Volume, Consistency Group or Snapshot Set, on page 14.
-check into pipelining of:  Get-XIOVolume matt*todel | Get-XIOSnapshot
	-not getting snapshot if volume has no LunMap, as it is relying on InitGrp stuff, instead of child-vol kind of thing (is there such a thing?)
-for New-Snapshot, add support for XIOSv3 (APIv1) snapshots; currently only supports new snapshots on XIOSv4 (APIv2)
	-for XIOS v3.0, support creation:
		-from one volume
		-from volumes
		-from one volumefolder
-add Filtering support in some way, possible only in API v2 (need to handle how to only "enable" it for XIOSv4+ XMSs)
	-see the "Filter" support that came in API v2 in the API guide (pp15-16 in EMC® XtremIO Storage Array Versions 4.0 and 4.0.1 RESTful API (Ver. 2.0) Guide)
	-good for speeding up LunMap retrieval and the likes
	-for Get-XIOSnapshot:  add Param option for "ancestor-vol-id", implement via Filter -- available via xmcli
	-for Get-XIOVolume:  add Param option for "sg-id" (snapshot group ID), implement via Filter -- available via xmcli
	-potentially once API allows for things like "?folder-id=b38b38123b38123asdfb38b38123" in the query string, so that can use IDs in URI?  Until then, these IDs would only be used to filter items _after_ they've been retrieved from the XMS appliance
		-add InitiatorGroupList_raw = .direct-list, InitiatorGroupUID = {just those IG UIDs} to IgFolder objects
			-same for VolumeList_raw = .direct-list for VolumeFolder objects
		-add UID to volumes, initiators, initiator groups
			-will allow for getting IGs from IGFolder, volumes from Volume folder, other stuff for IGs?
-future release:  remove deprecated properties that are noted by System.ObsoleteAttribute statements (deprecated in v0.9.5 or so)
	-before then, compile the type definition, so that these properties actually write warning in PowerShell session to make it more clear to users that properties are deprecated? Else, relying on them to have thoroughly read the changelog
-for supporting targeted cluster queries on XMS appliances that manage multiple clusters, still need to:
	-add piece that checks that the given Cluster values are managed by this XMS and if not, doesn't even try to get the given object, just does write-verbose of "no such cluster managed by this XMS", instead of non-graceful throw of, ""message": "sys_not_found""
	-?add piece that, if .Cluster count on given XIOConnection is 1, does not try to use cluster-name input param in URI
-for Get-XIO*Performance returns, include the GUID or URI or so of the given XIO object, for clarification (return of Get-XIODataProtectionGroupPerformance for multi-cluster does not give distinguishable objects -- can't tell the cluster of each DPG)
-update ReadMe w/ some of the info on the module's GeneralInfo page at vN -- the PSGet stuff, the getting started stuff, etc.
-add Pester tests for:
	Integration testing (tests for pipelining between cmdlets)
	New-XIO*
		-for new LunMap:
			-InitiatorGroup blah -volume blahvol -cluster xio04,xio05
			-InitiatorGroup blah -volume blahvol ## with no -Cluster and on 4.0 single-cluster
		-?need to use GUIDs in the names of new objs, so as to be able to remove them, and need to remove the items, too? Or, report on the objects created and generate the code to remove them, so whomever can remove at will?
	-include snippet somewhere that following is expected return for older XIOS versions when querying types that appeared in API in newer XIOS versions (and this behavior is there as a courtesy):
		WARNING: Type 'bbus' does not exist in xms0.dom.lilly.com's XIOS version. This is possibly an object type that was introduced in a later XIOS version
-once API exposes "move-to-folder" functionality, make Move- cmdlets for Volumes, VolumeFolders, InitiatorGroups, InitiatorGroupFolders
	-not available as of XIOS v3.0.1
-upgrade New-XIOVolumeFolder, New-XIOInitiatorGroupFolder to make full, deep path of folders (for when parent folder heirarchy does not yet exist)
	-example:  New-XIOVolumeFolder -Name newDeepFolder -ParentFolder /someVolume/Folder/ThatDoes/NotYet/Exist
	-needs to iterate through those parents from the root
	-and, make it just use a full path for the new folder, not Name and ParentFolder?  Like:  New-XIOVolumeFolder -Path /someVolume/Folder/ThatDoes/NotYet/Exist/myNewFolder
-need to exclude -OperatingSystem parameter option in New-XIOInitiator if API of XMS is v1 -- breaks things to send along in a request to API V1 XMS; lower priority
-for when dropping support for legacy XIOS/API (XIOS 2 & 3, API v1)
	-remove PerformanceInfo property from IGFolder, VolumeFolder (and remove Get-XIOInitiatorGroupFolderPerformance, Get-XIOVolumeFolderPerformance cmdlets)
	-remove the Nullable aspect of .Cluster properties in the type def (v2 API objects should always have the .sys-id property on objects for which code tries to make .Cluster value from said property)
-item types for which to add support in module:
	iscsi-portals
	iscsi-routes
-add ability to create ISCSI initiators via New-XIOInitiator
-for future (once supporitng iSCSI in this PSModule), add ability to set following properties via Set-XIOInitiator:  'initiator-authentication-user-name', 'initiator-authentication-password', 'initiator-discovery-user-name', 'initiator-discovery-password', 'cluster-authentication-user-name', 'cluster-authentication-password', 'cluster-discovery-user-name', 'cluster-discovery-password', 'remove-initiator-authentication-credentials', 'remove-initiator-discovery-credentials', 'remove-cluster-authentication-credentials', 'remove-cluster-discovery-credentials'
-?add ability for Get-XIOItemInfo to detect, for when -URI paramset is used, that "full=1" is in use, and to handle return object creation accordingly
-?for Set-XIO* cmdlets other than Set-XIOItemInfo, add ability to specify object by name and cluster?  Currently just supports by-object
-?provide ability for module user to set preferences for the module?  Like, a different default value for -OperatingSystem for New-XIOInitiator, for example?
-?add "v2 URI" property to Tag objects (VolumeFolder, InitiatorGroupFolder), so that Set- calls for them are easier to make
-?for PerfomanceCounter objects, need better way to present the .Counters property? (for easier export by user once retrieved)
-?eventually for Open-XIOMgmtConsole:  only act on existing XMS connections (as the cmdlet will need the XMS software version in order to create the correct URL to the JNLP file); or, will this cmdlet change to open the web management console instead of the Java management console, once the Web UI takes over?
-?add a Get-XIOUtilsConfiguration function to report things like the filespec of the StoredXioCred
-?add a Set-XIOUtilsConfiguration function to set things like the default port to use, and $true/$false for TrustAllCert
-?add "if ($PsCmdlet.ShouldProcess())" portion to New-XIOVolume, around the New-XioItem call, so as to have better WhatIf output?
-?add "small" and "unaligned" performance items, too? (available in xmcli)
-?add Get-XIOParentVolume / Get-XIOParentSnapshot
	-or, implement this via something like -RelatedObject param on Get-XIOVolume?
-?replace usage of singular item type string (essentially used for output type name creation; make config hsh table of plural item type string -> XIOItemInfo output object type)
	-use the config API item types as the ValidateSet value for ItemType in Get-XIOItem function, so as not to need to upkeep such info in multiple places!
	-have config hsh of API type (like /types/ig-folders) -> XioItemInfo type (like IgFolder)
		-to remove the "strip an 's', title case the string, and remove the dash" antics that are in place now
		-need to update all places that specify API types as singular to use real API type name
-?add object definitions of sub-property objects?  Could slow things down (like Get-VM does vs. Get-View in PowerCLI)
-?for when rev'ing minimum API support level to API v2.0, remove the conditional Cluster property population code (as needed .sys-id property should be present on everything at that point); affected object types:  Initiator, InitiatorGroup, LunMap, Target,






doing:
[feat_SetItems]
-for Set-XioItemInfo:
	working properly on pre XIOSv4 versions
	-need piece that makes proper URI w/ given method
	-only accept XioItemInfo objects for now
	-only geared towards XIOS v4 and up for now
-make sure that Set-XioItemInfo is solid, then work on:
	-needs "?cluster-id=blahh" ?
		no:  LdapConfig, Alert, AlertDefinition, EmailNotifier, SnmpNotifier
		yes:  Cluster, Volume, Snapshot, SnapshotScheduler, Initiator, InitiatorGroup, Target, ConsistencyGroup
	-done:
	-needs "?cluster-id=blahh" ?
		no:  Set-XIOInitiatorGroupFolder, Set-XIOSyslogNotifier, Set-XIOTag, Set-XIOUserAccount, Set-XIOVolumeFolder
		yes:  Set-XIOSnapshotSet
		issues w/ API documentation:
			setting SnapshotSet:  "cluster-id" and "snapshot-set-id" are invalid, per the API error message returned:  "message": "Command Syntax Error: Invalid property cluster-id"
-once done, un-export Set-XIOItemInfo?  Or, leave it exported?


done for version 0.next (after v0.12.0):


## things below here are in changelog/readme






done for previous versions:  moved to done.txt







## release items
rev module version
test
update changelog/readme

merge to master
move "Latest" tag to master commit
add version-specific tag
make .zip of just PSModule files



## for observing property changes to handle between versions
$strV40XmsName = "somexms00.dom.com"
$strV30XmsName = "somexms01.dom.com"
$strV241XmsName = "somexms02.dom.com"
$strV223XmsName = "somexms3.dom.com"
$credSomeAdmin_noDom = Get-Credential someXioAdmin

$arrTypesFor30 = (Get-XIOItemInfo -Credential $credSomeAdmin_noDom -URI_str https://$strV30XmsName/api/json/types -ReturnFullResponse_sw).children
$arrTypesFor241 = (Get-XIOItemInfo -Credential $credSomeAdmin_noDom -URI_str https://$strV241XmsName/api/json/types -ReturnFullResponse_sw).children
$arrTypesInBothVersions = $arrTypesFor30 | %{$_.name} | ?{($arrTypesFor241 | %{$_.Name}) -contains $_}
$hshObjPropertyDifferencesInfo = @{}
foreach ($strItemtype in ($arrTypesInBothVersions | %{$_.TrimEnd("s")})) {
#foreach ($strItemtype in $arrTypesInBothVersions) {
	Write-Verbose -Verbose "working on '$strItemtype'"
	$arrXioClusterInfoRaw_v241 = Get-XIOItemInfo -ItemType $strItemtype -computer $strV241XmsName -TrustAllCert -ReturnFullResponse -port 443 -cred $credSomeAdmin_noDom
	$arrXioClusterInfoRaw_v30 = Get-XIOItemInfo -ItemType $strItemtype -computer $strV30XmsName -TrustAllCert -ReturnFullResponse -port 443 -cred $credSomeAdmin_noDom
	## not working, yet
	#$arrXioClusterInfoRaw_v241 = Get-XIOItemInfo -Uri https://$strV241XmsName/api/json/types/$strItemtype -TrustAllCert -ReturnFullResponse -cred $credSomeAdmin_noDom
	#$arrXioClusterInfoRaw_v30 = Get-XIOItemInfo -ItemType $strItemtype -computer $strV30XmsName -TrustAllCert -ReturnFullResponse -port 443 -cred $credSomeAdmin_noDom

	$hshObjPropertyDifferencesInfo["$strItemtype"] = @{
		"inV241NotInV30" = ($arrXioClusterInfoRaw_v241.content | gm -Type NoteProperty).Name | ?{($arrXioClusterInfoRaw_v30.content | gm -Type NoteProperty).name -notcontains $_}
		"inV30NotInV241" = ($arrXioClusterInfoRaw_v30.content | gm -Type NoteProperty).Name | ?{($arrXioClusterInfoRaw_v241.content | gm -Type NoteProperty).name -notcontains $_}
	} ## end hashtable
}


## between 3.0 and 2.2.3
$arrTypesFor30 = (Get-XIOItemInfo -Credential $credSomeAdmin_noDom -URI_str https://$strV30XmsName/api/json/types -ReturnFullResponse_sw).children
$arrTypesFor223 = (Get-XIOItemInfo -URI_str https://$strV223XmsName/api/json/types -ReturnFullResponse_sw).children
$arrTypesInBothVersions = $arrTypesFor30 | %{$_.name} | ?{($arrTypesFor223 | %{$_.Name}) -contains $_}
$hshObjPropertyDifferencesInfo = @{}
foreach ($strItemtype in ($arrTypesInBothVersions | %{$_.TrimEnd("s")})) {
#foreach ($strItemtype in $arrTypesInBothVersions) {
	Write-Verbose -Verbose "working on '$strItemtype'"
	$arrXioClusterInfoRaw_v223 = Get-XIOItemInfo -ItemType $strItemtype -computer $strV223XmsName -TrustAllCert -ReturnFullResponse -port 443
	$arrXioClusterInfoRaw_v30 = Get-XIOItemInfo -ItemType $strItemtype -computer $strV30XmsName -TrustAllCert -ReturnFullResponse -port 443 -cred $credSomeAdmin_noDom
	## not working, yet
	#$arrXioClusterInfoRaw_v223 = Get-XIOItemInfo -Uri https://$strV223XmsName/api/json/types/$strItemtype -TrustAllCert -ReturnFullResponse -cred $credSomeAdmin_noDom
	#$arrXioClusterInfoRaw_v30 = Get-XIOItemInfo -ItemType $strItemtype -computer $strV30XmsName -TrustAllCert -ReturnFullResponse -port 443 -cred $credSomeAdmin_noDom

	$hshObjPropertyDifferencesInfo["$strItemtype"] = @{
		"inV223NotInV30" = ($arrXioClusterInfoRaw_v223.content | gm -Type NoteProperty).Name | ?{($arrXioClusterInfoRaw_v30.content | gm -Type NoteProperty).name -notcontains $_}
		"inV30NotInV223" = ($arrXioClusterInfoRaw_v30.content | gm -Type NoteProperty).Name | ?{($arrXioClusterInfoRaw_v223.content | gm -Type NoteProperty).name -notcontains $_}
	} ## end hashtable
}


<#  older (2.4, 2.2.3)
foreach ($strItemtype in @("cluster", "initiator-group", "initiator", "lun-map", "target-group", "target", "volume", "brick", "ssd", "storage-controller", "xenv")) {
	Write-Verbose -Verbose "working on '$strItemtype'"
	$arrXioClusterInfoRaw_v24 = Get-XIOItemInfo -ItemType $strItemtype -computer $strV24XmsName -TrustAllCert -ReturnFullResponse -port 443 -cred $credSomeAdmin_noDom
	$arrXioClusterInfoRaw_v223 = Get-XIOItemInfo -ItemType $strItemtype -computer $strV223XmsName -TrustAllCert -ReturnFullResponse -port 443
	$hshObjPropertyDifferencesInfo["$strItemtype"] = @{
		"inV24NotInV223" = ($arrXioClusterInfoRaw_v24.content | gm -Type NoteProperty).Name | ?{($arrXioClusterInfoRaw_v223.content | gm -Type NoteProperty).name -notcontains $_}
		"inV223NotInV24" = ($arrXioClusterInfoRaw_v223.content | gm -Type NoteProperty).Name | ?{($arrXioClusterInfoRaw_v24.content | gm -Type NoteProperty).name -notcontains $_}
	} ## end hashtable
}
#>

## get all properties and values, sorted by property name
(Get-XIOItemInfo -ItemType storage-controller -ReturnFullResponse_sw).content | %{Select -InputObject $_ -Property (gm -in $_ -MemberType NoteProperty | %{$_.name} | sort)}
(Get-XIOItemInfo -Uri https://somexms01.dom.com/api/json/types/data-protection-groups/1 -ReturnFullResponse_sw).content | %{Select -InputObject $_ -Property (gm -in $_ -MemberType NoteProperty | %{$_.name} | sort)}

-clusters obj
	-add "brick-list" property (available in 2.2.3 and 2.4, at least)


testing:
gc GetXIOItem.ps1 | sls "^\s+.Example" -Context 0,1 | select -ExpandProperty Context | select -ExpandProperty postcontext
